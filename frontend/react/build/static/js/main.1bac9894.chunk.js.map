{"version":3,"sources":["AppNavbar.js","Home.js","GroupList.js","GroupEdit.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","Home","fluid","GroupList","groups","isLoading","remove","fetch","then","response","json","data","id","method","headers","updatedGroups","filter","i","groupList","map","group","address","city","stateOrProvince","key","style","whiteSpace","name","events","event","Intl","DateTimeFormat","year","month","day","format","Date","date","title","size","width","GroupEdit","emptyItem","country","postalCode","item","handleChange","handleSubmit","match","params","target","value","preventDefault","body","JSON","stringify","history","push","onSubmit","for","type","onChange","autoComplete","withRouter","App","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bac9894.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class AppNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isOpen: false};\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <Navbar color=\"dark\" dark expand=\"md\">\r\n      <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\r\n      <NavbarToggler onClick={this.toggle}/>\r\n      <Collapse isOpen={this.state.isOpen} navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink\r\n              href=\"https://twitter.com/oktadev\">@oktadev</NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"https://github.com/oktadeveloper/okta-spring-boot-react-crud-example\">GitHub</NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'reactstrap';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <Button color=\"link\"><Link to=\"/groups\">Manage JUG Tour</Link></Button>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass GroupList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {groups: [], isLoading: true};\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoading: true});\r\n\r\n    fetch('api/groups')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({groups: data, isLoading: false}));\r\n  }\r\n\r\n  async remove(id) {\r\n    await fetch(`/api/group/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(() => {\r\n      let updatedGroups = [...this.state.groups].filter(i => i.id !== id);\r\n      this.setState({groups: updatedGroups});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {groups, isLoading} = this.state;\r\n\r\n    if (isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    const groupList = groups.map(group => {\r\n      const address = `${group.address || ''} ${group.city || ''} ${group.stateOrProvince || ''}`;\r\n      return <tr key={group.id}>\r\n        <td style={{whiteSpace: 'nowrap'}}>{group.name}</td>\r\n        <td>{address}</td>\r\n        <td>{group.events.map(event => {\r\n          return <div key={event.id}>{new Intl.DateTimeFormat('en-US', {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: '2-digit'\r\n          }).format(new Date(event.date))}: {event.title}</div>\r\n        })}</td>\r\n        <td>\r\n          <ButtonGroup>\r\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/groups/\" + group.id}>Edit</Button>\r\n            <Button size=\"sm\" color=\"primary\" onClick={() => this.remove(group.id)}>Delete</Button>\r\n          </ButtonGroup>\r\n        </td>\r\n      </tr>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <div className=\"float-right\">\r\n            <Button color=\"success\" tag={Link} to=\"/groups/new\">Add Group</Button>\r\n          </div>\r\n          <h3>My JUG Tour</h3>\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n            <tr>\r\n              <th width=\"20%\">Name</th>\r\n              <th width=\"20%\">Location</th>\r\n              <th>Events</th>\r\n              <th width=\"10%\">Actions</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {groupList}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupList;","import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\n\r\nclass GroupEdit extends Component {\r\n\r\n  emptyItem = {\r\n    name: '',\r\n    address: '',\r\n    city: '',\r\n    stateOrProvince: '',\r\n    country: '',\r\n    postalCode: ''\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const group = await (await fetch(`/api/group/${this.props.match.params.id}`)).json();\r\n      this.setState({item: group});\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    await fetch('/api/group', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push('/groups');\r\n  }\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit Group' : 'Add Group'}</h2>;\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label for=\"name\">Name</Label>\r\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\r\n                   onChange={this.handleChange} autoComplete=\"name\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"address\">Address</Label>\r\n            <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\r\n                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"city\">City</Label>\r\n            <Input type=\"text\" name=\"city\" id=\"city\" value={item.city || ''}\r\n                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\r\n          </FormGroup>\r\n          <div className=\"row\">\r\n            <FormGroup className=\"col-md-4 mb-3\">\r\n              <Label for=\"stateOrProvince\">State/Province</Label>\r\n              <Input type=\"text\" name=\"stateOrProvince\" id=\"stateOrProvince\" value={item.stateOrProvince || ''}\r\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\r\n            </FormGroup>\r\n            <FormGroup className=\"col-md-5 mb-3\">\r\n              <Label for=\"country\">Country</Label>\r\n              <Input type=\"text\" name=\"country\" id=\"country\" value={item.country || ''}\r\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\r\n            </FormGroup>\r\n            <FormGroup className=\"col-md-3 mb-3\">\r\n              <Label for=\"country\">Postal Code</Label>\r\n              <Input type=\"text\" name=\"postalCode\" id=\"postalCode\" value={item.postalCode || ''}\r\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\r\n            </FormGroup>\r\n          </div>\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to=\"/groups\">Cancel</Button>\r\n            </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(GroupEdit);","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport GroupList from './GroupList';\nimport GroupEdit from './GroupEdit';\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Home}/>\n          <Route path='/groups' exact={true} component={GroupList}/>\n          <Route path='/groups/:id' component={GroupEdit}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}